pragma solidity 0.4.25;

import "truffle/Assert.sol";
import "truffle/DeployedAddresses.sol";
import "../contracts/ThamesBoats.sol";

// NOTES
// https://ethereum.stackexchange.com/questions/54646/bytes4keccak256functionuint-vs-abi-encodewithsignaturebuyuin
//
// Assert.sol: https://github.com/trufflesuite/truffle/blob/develop/packages/truffle-core/lib/testing/Assert.sol
//
// supplychain = new SupplyChain();
//  supplychain = SupplyChain(DeployedAddresses.SupplyChain());
//
// Sol 0.5.0 breaking changes
// https://solidity.readthedocs.io/en/v0.5.0/050-breaking-changes.html?highlight=payable

contract TestThamesBoats {

  // Initial Ether balance
  uint public initialBalance = 1 ether;
  address owner;

  // ThrowProxy assignments
  ThamesBoats public thamesBoats;
  ThrowProxy public contractOwner;
  ThrowProxy public marketAdmin;
  ThrowProxy public clubOwner;
  ThrowProxy public buyer;

  enum ClubStatus {
      Closed,     // 0
      Open,       // 1
      Removed     // 2
  }

  enum BoatStatus {
      NotForSale, // 0
      ForSale,    // 1
      Removed     // 2
  }


  // test data
  // clubs
  string club1Name = "Thames Rowing Club";
  string club1Location = "Putney, SW15";
  ClubStatus club1Status = ClubStatus.Open;
/*
  string club2Name = "Furnival Sculling Club";
  string club2Location = "Hammersmith, W6";
  ClubStatus club2Status = ClubStatus.Open;
  string club3Name = "Fulham Reach Boat Club";
  string club3Location = "Fulham, SW6";
  ClubStatus club3Status = ClubStatus.Open;
*/
  // boats
  string boat1Name = "Empacher - single scull";
  string boat1Desc = "2009 sinlge scull, good condition, speed coach fitted. 90kg";
  uint256 boat1Price = 10500000;
  uint256 boat1Quantity = 1;
  BoatStatus boat1Status = BoatStatus.ForSale;

  /*
  string boat2Name = "Filippi - 4+, quad scull";
  string boat2Desc = "2019 lightwight quad scull, brand new. Crew weight 75kg";
  uint256 boat2Price = 21800000;
  uint256 boat2Quantity = 4;
  BoatStatus boat2Status = BoatStatus.Removed;
  string boat3Name = "Janousek Racing - eight";
  string boatr3Desc = "2018 eight, brand new, with sculling rigers. Crew weight 80kg";
  uint256 boat3Price = 41800000;
  uint256 bost3Quantity = 2;
  BoatStatus boat3Status = BoatStatus.NotForSale;
  */
  address tb;

  // beforeEach - test setup
  function beforeEach () public {
      // thamesBoats contract owner
      owner = msg.sender;

      // Set up new contract instances for each test (clean room)
      thamesBoats = ThamesBoats(DeployedAddresses.ThamesBoats());
      tb = DeployedAddresses.ThamesBoats();
  //    contractOwner = new ThrowProxy(owner);
      marketAdmin = new ThrowProxy(address(thamesBoats));
      clubOwner = new ThrowProxy(address(thamesBoats));
      buyer = new ThrowProxy(address(thamesBoats));
     
      // Fund the buyer with 1 ether
      address(buyer).transfer(1 ether);
  }

  function testAddMarketAdmin() public {
      //bool result = contractOwner.addMarketAdmin(address(0));
      thamesBoats.addMarketAdmin(address(marketAdmin)).call(msg.sender);
      //ult = address(owner).call(abi.encodeWithSignature("addMarketAdmin(address)", address(marketAdmin)));
      //bool result = address(owner).call(abi.encodeWithSignature("addMarketAdmin(address)", address(marketAdmin)));
      //Assert.isTrue(result, "contractOwner.addMarketAdmin(marketAdmin) failed");
      bool isMarketAdmin = ThamesBoats(thamesBoats).roleMarketAdmin(address(marketAdmin));
      Assert.isTrue(isMarketAdmin, "marketAdmin address not added to roleMarketAdmin");
  }

/*
  function testGetter() public {
    //  uint256 test = thamesBoats.ownertoClub(address(this));
     // Assert.equal(test, 0, "test");
      //bool stopped = thamesBoats.stopped();
     // Assert.isFalse(stopped, "stopped test");

      //bool result = address(owner).call(abi.encodeWithSignature("addMarketAdmin(address)", address(marketAdmin)));
      //Assert.isTrue(result, "made market armind okay");
      bool amImarketadmin = thamesBoats.roleMarketAdmin(address(marketAdmin)); 
      Assert.isTrue(amImarketadmin, "owner is not market admin");

     // Assert.isTrue(thamesBoats.roleMarketAdmin(address(marketAdmin)), "marketAdmin has not been made a market admin");
  }
*/

/*
  function testAddMarketAdmin() public {
      thamesBoats.addMarketAdmin(address(marketAdmin));     
      Assert.isTrue(thamesBoats.roleMarketAdmin(address(marketAdmin)), "marketAdmin has not been made a market admin");
  }

  function testRemoveMarketAdmin() public {
      testAddMarketAdmin();
      thamesBoats.removeMarketAdmin(address(marketAdmin));     
  }

  function testAddMarketAdmin() public {
      thamesBoats.addMarketAdmin(address(marketAdmin));     
      Assert.isTrue(thamesBoats.roleMarketAdmin(address(marketAdmin)), "marketAdmin has not been made a market admin");
  }

  function testRemoveMarketAdmin() public {
      testAddMarketAdmin();
      thamesBoats.removeMarketAdmin(address(marketAdmin));     
      Assert.isFalse(thamesBoats.roleMarketAdmin(address(marketAdmin)), "marketAdmin has not had marketAdmin revoked");
  }
   
  function testAddClubOwner() public {
      thamesBoats.addClubOwner(address(clubOwner));
      Assert.isTrue(thamesBoats.roleClubOwner(address(clubOwner)), "marketAdmin has not been made a market admin");
  }
*/
/*  
  function testAddBoat() public {
      thamesBoats.addClubOwner(address(clubOwner));
      string memory test; 
      (bool result,) = clubOwner.addBoat(test, boat1Desc, boat1Price, boat1Quantity);
      //(bool result,) = clubOwner.addBoat(boat1Name, boat1Desc, boat1Price, boat1Quantity);
      //(bool result2,) = clubOwner.addBoat(boat1Name, boat1Desc, boat1Price, boat1Quantity);
      //Assert.isTrue(result, "Adding of boat by clubOwner fails");

      //uint256 clubId = thamesBoats.roleClubOwner(address(thamesBoats));
      uint256 clubId = thamesBoats.ownertoClub(address(thamesBoats));
      Assert.equal(clubId, 1, "test");
      //(uint256 boatId) = clubOwner.addBoat(boat1Name, boat1Desc, boat1Price, boat1Quantity);
      //  Assert.isTrue:1
  }
    
  function testRemoveClubOwner() public {
      testAddMarketAdmin();
      thamesBoats.removeClubOwner(address(clubOwner));   
      Assert.isFalse(thamesBoats.roleClubOwner(address(clubOwner)), "marketAdmin has not had marketAdmin revoked");
  }
*/ 

  // Allow this contract to receive ether
  function () external payable {}

}


/**
ThrowThrowProxy notes:
https://truffleframework.com/tutorials/testing-for-throws-in-solidity-tests

Returns false
  bool result = address.call(bytes4(bytes32(sha3(“functionThatThrows()”))));
  bool result = address.call((abi.encodeWithSignature("f(functionThatThrows)"));

Returns true
  bool result = address.call(bytes4(bytes32(sha3(“functionThatDoesNotThrow()”))));
  bool result = address.call((abi.encodeWithSignature("f(functionThatThrows)"));
*/


// ThrowProxy contract
contract ThrowProxy {
  address target;

  constructor (address _target) public {
      target = _target;
  }

  function addMarketAdmin (address _address) public returns(bool) {
      return address(target).call(abi.encodeWithSignature("addMarketAdmin(address)", _address));
  }
 
/*
  function addBoat (
      string memory _name, 
      string memory _description, 
      uint256 _price, 
      uint256 _quantity
  )
      public 
      returns(bool, bytes memory)
  {
   //   return(ThamesBoats(target).addBoat(_name, _description, _price, _quantity));
      return(address(target).call(abi.encodeWithSignature
          ("addBoat(string, string, uint256, uint256)", _name, _description, _price, _quantity))); 
  }

  function buyItem (uint _sku, uint price) public returns (bool, bytes memory) {
    return address(target).call.value(price)(abi.encodeWithSignature("buyItem(uint256)", _sku));
  }

  function shipItem (uint _sku) public returns (bool, bytes memory) {
    return address(target).call(abi.encodeWithSignature("shipItem(uint256)", _sku));
  }

  function receiveItem (uint _sku) public returns (bool, bytes memory) {
    return address(target).call(abi.encodeWithSignature("receiveItem(uint256)", _sku));
  }

  function getState (uint _sku) public view returns (uint) {
   SupplyChain(target).getState(_sku);
  }
*/

  // Fallback, to allow contract to receive ether
  function () external payable {}

}
